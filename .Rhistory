ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 6, height = 2.5)
#faceted bar charts with no colors
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2016")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 7, height = 3)
#bring data in
data<-read.csv(file="deployment2_2016_smooth_csv.csv", header=TRUE)
#drop turf and post 72 hour obs
data <- data[ which(data$hours_since_deployment < 73 & data$treatment != 'turf'), ]
#make block into a factor
data$block <- as.factor(data$block)
##not using this code bit for 2016, because i did it in excel when smoothing: data$total<-rowSums(data[7:13])
####data$surviving<-data$total_all_stages/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
#ok, let's do this as a linear mixed effects model. We have to also call some other packages if we want p values
library(lmerTest)
#do the anova using lmer function
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
#and an anova
anova(result)
#analysis of random and fixed parts and post hoc
#analysis of time and Treatment effects
step(result)
#####need to do a t-test comparing number surviving in closed vs sham and closed vs open
###make object data70 with only surviving at 70 hours
data70<-data2[ which(data2$hours_since_deployment == "70"), ]
###do t-test comparing closed and sham
t.test(data70$close,data70$sham, paired=TRUE, "greater")
###t-test comparing open vs sham
t.test(data70$surviving,data70$sham, paired=TRUE, "greater")
##wilcox test of same
wilcox.test(data70$close, data70$sham, paired=TRUE)
wilcox.test(data70$surviving, data70$sham, paired=TRUE)
##
###below is lots of plotting code
#load library(ddply) compute summary stats for plotting
library(plyr)
library(ggthemes)
data2.summary<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(surviving),
mean=mean(surviving),
sd   = sd(surviving),
se   = sd / sqrt(N) )
data2.summary.closed<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(closed),
mean=mean(closed),
sd   = sd(closed),
se   = sd / sqrt(N) )
data2.summary.sham<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(sham),
mean=mean(sham),
sd   = sd(sham),
se   = sd / sqrt(N) )
#creating the plot!
#make my colour palette
cols <- c("corn" = "gold2", "prairie" = "lightreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
#load ggplot2
library(ggplot2)
library(ggthemes)
##error bar plots
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.eb.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.open_aug_2016.png', width=4, height=2)
ggplot.eb.open
ggplot.eb.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.closed_aug_2016.png', width=4, height=2)
ggplot.eb.closed
ggplot.eb.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme(text = element_text(size=14))+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.sham_aug_2016.png', width=4, height=2)
ggplot.eb.sham
#ribbon plots
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.open
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
##more plotting, making chart for comparing among exlcosure treatments
melt<-melt(data2, measure.vars = c("surviving", "closed", "sham"))
summary.melt<-ddply(melt, .(hours_since_deployment, variable), summarize,
N=length(value),
mean=mean(value),
sd   = sd(value),
se   = sd / sqrt(N) )
ggplot(summary.melt, aes(x=hours_since_deployment, y=mean, fill=variable))+
ggtitle("August 2016")+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
geom_line(size=1)+
xlab("\nHours Since Deployment")+
ylab("Surviving\n")+
theme_few()+
guides(alpha=FALSE)+
theme(text = element_text(size=14))+
ylim(0,1)+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=5, height=4)
oviposition2016<-read.csv(file="oviposition2016.csv", header=TRUE) #read in oviposition2016 file
oviposition2016<-na.omit(oviposition2016) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2016.avg <-ddply(oviposition2016, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#drop the turf treatment
oviposition2016.avg<-oviposition2016.avg[ which(oviposition2016.avg$treatment != 'turf'), ]
#make block, date, time, deployment into factors
oviposition2016.avg$block <- as.factor(oviposition2016.avg$block)
oviposition2016.avg$date <- as.factor(oviposition2016.avg$date)
oviposition2016.avg$time <- as.factor(oviposition2016.avg$time)
oviposition2016.avg$deployment <- as.factor(oviposition2016.avg$deployment)
#do the anova using glm function
result <- glm(monarch_eggs.sum ~ block + treatment, offset=nplants, data=oviposition2016.avg)
summary(result)
aov(result)
summary(aov(result))
TukeyHSD(aov(result))
#rerun anova with appropriate data as factors, with sum of eggs as response variable
result_covariates <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=nplants, data=oviposition2016.avg)
summary(result_covariates)
anova(result_covariates) #use anova rather than AOV because it handles GLM better
summary(anova(result_covariates))
TukeyHSD(aov(result_covariates)) #Tukey only works with aov function
#rerun this with poisson distribution
result_covariates.poisson <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=log(nplants), data=oviposition2016.avg, family = "poisson")
summary(result_covariates.poisson)
anova(result_covariates.poisson, test="Rao")
summary(anova(result_covariates.poisson, test="Rao"))
#skip pairwise comparisons- do this only for NB model
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset =log(nplants), data=oviposition2016.avg)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2016.summary<-ddply(oviposition2016.avg, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2016.summary.overall<-ddply(oviposition2016.avg, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette.
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.summary.overall, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition2016 by Habitat with SE Bars") +
theme(panel.background = element_blank(), complete=FALSE)
oviposition2016.deployment3.avg<- subset(oviposition2016.avg, deployment==3)
#Doug asked me to redo the ANOVA with only the third egg check
# this is where the most important separations will be observed- sample sizes were very low in first two
oviposition2016.deployment3.avg<- subset(oviposition2016.avg, deployment==3)
#since we used a NB model for the whole dataset, let's just dive right in with an NB on the subset
library(pscl)
result_covariates.deployment3.nb <- glm.nb(monarch_eggs.sum ~ block + treatment, offset= log(nplants), data=oviposition2016.deployment3.avg)
summary(result_covariates.deployment3.nb)
anova(result_covariates.deployment3.nb, test="Rao")
summary(anova(result_covariates.deployment3.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.deployment3.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
oviposition2016.deployment3.summary<-ddply(oviposition2016.deployment3.avg, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
head(oviposition2016.deployment3.summary)
#make a bar plot with ggplot
# Error bars represent standard error of the mean
#cols is my personalized colour palette.
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.deployment3.summary, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition2016.deployment3 by Habitat with SE Bars") +
theme(panel.background = element_blank())+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))
#faceted bar chart!
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant observation" )+
ggtitle("Monarch Butterfly oviposition2016 by Habitat with SE Bars") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))
#####for days with more than one egg check, doug wants me to add up all the eggs and divide by the
######number of plants in the plot (or average if it changed). so redoing the former code from above to
### do this. also adding and doing the same for 2017
oviposition2016<-read.csv(file="oviposition2016.csv", header=TRUE) #read in oviposition2016 file
oviposition2016<-na.omit(oviposition2016) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2016.avg <-ddply(oviposition2016, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#drop the turf treatment
oviposition2016.avg<-oviposition2016.avg[ which(oviposition2016.avg$treatment != 'turf'), ]
#average plants checked per day and sum all the eggs found per day
oviposition2016.avg.2 <-ddply(oviposition2016.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2016.avg.2 <-ddply(oviposition2016.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2016.avg.2$block <- as.factor(oviposition2016.avg.2$block)
oviposition2016.avg.2$date <- as.factor(oviposition2016.avg.2$date)
oviposition2016.avg.2$deployment <- as.factor(oviposition2016.avg.2$deployment)
#do the anova using glm function
result <- glm(monarch_eggs.sum ~ block + treatment, offset=nplants, data=oviposition2016.avg)
summary(result)
aov(result)
summary(aov(result))
TukeyHSD(aov(result))
#rerun anova with appropriate data as factors, with sum of eggs as response variable
result_covariates <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=nplants, data=oviposition2016.avg)
summary(result_covariates)
anova(result_covariates) #use anova rather than AOV because it handles GLM better
summary(anova(result_covariates))
TukeyHSD(aov(result_covariates)) #Tukey only works with aov function
#rerun this with poisson distribution
result_covariates.poisson <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=log(nplants), data=oviposition2016.avg, family = "poisson")
summary(result_covariates.poisson)
anova(result_covariates.poisson, test="Rao")
summary(anova(result_covariates.poisson, test="Rao"))
#skip pairwise comparisons- do this only for NB model
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset=log(nplants), data=oviposition2016.avg)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2016.summary<-ddply(oviposition2016.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2016.summary.overall<-ddply(oviposition2016.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. it doesn't seem to work any more
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols)+
ylim(0,.1)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###################OK! trying the above for 2017
oviposition2017<-read.csv(file="oviposition2017.csv", header=TRUE) #read in oviposition2017 file
oviposition2017<-na.omit(oviposition2017) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2017.avg <-ddply(oviposition2017, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#average plants checked per day and sum all the eggs found per day
oviposition2017.avg.2 <-ddply(oviposition2017.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2017.avg.2 <-ddply(oviposition2017.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2017.avg.2$block <- as.factor(oviposition2017.avg.2$block)
oviposition2017.avg.2$date <- as.factor(oviposition2017.avg.2$date)
oviposition2017.avg.2$deployment <- as.factor(oviposition2017.avg.2$deployment)
#do the anova using glm function
result <- glm(monarch_eggs.sum ~ block + treatment, offset=nplants, data=oviposition2017.avg.2)
summary(result)
aov(result)
summary(aov(result))
TukeyHSD(aov(result))
#rerun anova with appropriate data as factors, with sum of eggs as response variable
result_covariates <- glm(monarch_eggs.sum ~ block + treatment + deployment, offset=nplants, data=oviposition2017.avg.2)
summary(result_covariates)
anova(result_covariates) #use anova rather than AOV because it handles GLM better
summary(anova(result_covariates))
TukeyHSD(aov(result_covariates)) #Tukey only works with aov function
#rerun this with poisson distribution
result_covariates.poisson <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=log(nplants.mean), data=oviposition2017.avg.2, family = "poisson")
summary(result_covariates.poisson)
anova(result_covariates.poisson, test="Rao")
summary(anova(result_covariates.poisson, test="Rao"))
#skip pairwise comparisons- do this only for NB model
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset(log(nplants.mean)), data=oviposition2017.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2017.avg.2, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2017.summary<-ddply(oviposition2017.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2017.summary.overall<-ddply(oviposition2017.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. i can't get it to work any more, so i took out the argument
cols2017 <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple" )
ggplot(oviposition2017.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
ylim(0,.1)+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###### more ggplotting. can he make a faceted chart again? let's find out
#faceted bar chart!
cols <- c( "firebrick1", "gold2","yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2017.png', width = 7, height = 3)
#faceted bar charts with no colors
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2016")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 7, height = 3)
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
