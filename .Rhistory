<<<<<<< HEAD
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1 | block:treatment))
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, random=1|block:treatment)
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, random=1|block)
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1 | block))
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1 | block:treatment))
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1 | block/treatment))
summary(result_gls)
anova(result_gls)
result_gls <- gls(surviving~ hours_since_deployment * treatment +  (1|block/treatment), data=data2, correlation = corCAR1(form = ~ 1|block/treatment))
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1|block/treatment))
summary(result_gls)
summary(result)
summary(result_gls)
=======
library(ggplot2)
library(ggthemes)
##error bar plots
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.eb.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.open_aug_2016.png', width=4, height=2)
ggplot.eb.open
ggplot.eb.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.closed_aug_2016.png', width=4, height=2)
ggplot.eb.closed
ggplot.eb.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme(text = element_text(size=14))+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.sham_aug_2016.png', width=4, height=2)
ggplot.eb.sham
#ribbon plots
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.open
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
##more plotting, making chart for comparing among exlcosure treatments
melt<-melt(data2, measure.vars = c("surviving", "closed", "sham"))
summary.melt<-ddply(melt, .(hours_since_deployment, variable), summarize,
N=length(value),
mean=mean(value),
sd   = sd(value),
se   = sd / sqrt(N) )
ggplot(summary.melt, aes(x=hours_since_deployment, y=mean, fill=variable))+
ggtitle("August 2016")+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
geom_line(size=1)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme_few()+
guides(alpha=FALSE)+
theme(text = element_text(size=14))+
ylim(0,1)+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=7, height=6)
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
#bring data in
data<-read.csv(file="deployment2_2016_smooth_csv.csv", header=TRUE)
#drop turf and post 72 hour obs
data <- data[ which(data$hours_since_deployment < 73 & data$treatment != 'turf'), ]
#make block into a factor
data$block <- as.factor(data$block)
<<<<<<< HEAD
##not using this code bit for 2016, because i did it in excel when smoothing: data$total<-rowSums(data[7:13])
####data$surviving<-data$total_all_stages/data$Initial_count
library(reshape2)
=======
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
<<<<<<< HEAD
#ok, let's do this as a linear mixed effects model. We have to also call some other packages if we want p values
library(lmerTest)
#do the anova using lmer function
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
#and an anova
=======
library(lmerTest)
#do the anova using lmer function
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment) + closed, data=data2)
result
summary(result)
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
anova(result)
#analysis of random and fixed parts and post hoc
#analysis of time and Treatment effects
step(result)
<<<<<<< HEAD
###going to try the same with the gls function, because my random effect variable is correlated within subject
library(nlme)
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1|block/treatment))
summary(result_gls)
anova(result_gls)
=======
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
?lattice
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block,
main="Lattice 2017")
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
#bring data in
data<-read.csv(file="deployment2_2016_smooth_csv.csv", header=TRUE)
#drop turf and post 72 hour obs
data <- data[ which(data$hours_since_deployment < 73 & data$treatment != 'turf'), ]
#make block into a factor
data$block <- as.factor(data$block)
##not using this code bit for 2016, because i did it in excel when smoothing: data$total<-rowSums(data[7:13])
####data$surviving<-data$total_all_stages/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
#ok, let's do this as a linear mixed effects model. We have to also call some other packages if we want p values
library(lmerTest)
#do the anova using lmer function
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
#and an anova
anova(result)
#analysis of random and fixed parts and post hoc
#analysis of time and Treatment effects
step(result)
###going to try the same with the gls function, because my random effect variable is correlated within subject
library(nlme)
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1|block/treatment))
summary(result_gls)
anova(result_gls)
#####need to do a t-test comparing number surviving in closed vs sham and closed vs open
###make object data70 with only surviving at 70 hours
data70<-data2[ which(data2$hours_since_deployment == "70"), ]
###do t-test comparing closed and sham
t.test(data70$close,data70$sham, paired=TRUE, "greater")
###t-test comparing open vs sham
t.test(data70$surviving,data70$sham, paired=TRUE, "greater")
##wilcox test of same
wilcox.test(data70$close, data70$sham, paired=TRUE)
wilcox.test(data70$surviving, data70$sham, paired=TRUE)
##
###below is lots of plotting code
#load library(ddply) compute summary stats for plotting
library(plyr)
library(ggthemes)
data2.summary<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(surviving),
mean=mean(surviving),
sd   = sd(surviving),
se   = sd / sqrt(N) )
data2.summary.closed<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(closed),
mean=mean(closed),
sd   = sd(closed),
se   = sd / sqrt(N) )
data2.summary.sham<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(sham),
mean=mean(sham),
sd   = sd(sham),
se   = sd / sqrt(N) )
#creating the plot!
#make my colour palette
cols <- c("corn" = "gold2", "prairie" = "lightreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
#load ggplot2
library(ggplot2)
library(ggthemes)
##error bar plots
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.eb.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.open_aug_2016.png', width=4, height=2)
ggplot.eb.open
ggplot.eb.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.closed_aug_2016.png', width=4, height=2)
ggplot.eb.closed
ggplot.eb.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme(text = element_text(size=14))+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.sham_aug_2016.png', width=4, height=2)
ggplot.eb.sham
#ribbon plots
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.open
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
##more plotting, making chart for comparing among exlcosure treatments
melt<-melt(data2, measure.vars = c("surviving", "closed", "sham"))
summary.melt<-ddply(melt, .(hours_since_deployment, variable), summarize,
N=length(value),
mean=mean(value),
sd   = sd(value),
se   = sd / sqrt(N) )
ggplot(summary.melt, aes(x=hours_since_deployment, y=mean, fill=variable))+
ggtitle("August 2016")+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
geom_line(size=1)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme_few()+
guides(alpha=FALSE)+
theme(text = element_text(size=14))+
ylim(0,1)+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
<<<<<<< HEAD
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=5, height=4)
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = c("p", "r"),
main="August 2016")
=======
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=7, height=6)
View(data2)
##trying a lattice plot
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block, data = ""
main="Lattice 2017")
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block, data = data1
main="Lattice 2017")
##trying a lattice plot
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block, data = data1,
main="Lattice 2017")
##trying a lattice plot
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block, data = data1,
main="Lattice 2017")
##trying a lattice plot
library(lattice)
cloud(surviving ~ hours_since_deployment * treatment | block, data = data1,
main="Lattice 2017")
lattice<-cloud(surviving ~ hours_since_deployment * treatment | block, data = data1,
main="Lattice 2017")
library(lattice)
lattice<-cloud(surviving ~ hours_since_deployment * treatment | block, data = data2,
main="Lattice 2017")
lattice
lattice<-xyplot(surviving ~ hours_since_deployment * treatment | block, data = data2,
main="Lattice 2017")
lattice
lattice<-xyplot(surviving ~ hours_since_deployment * treatment | block:treatment, data = data2,
main="Lattice 2017")
lattice
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2,
main="Lattice 2017")
lattice
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "b"
main="Lattice 2016")
lattice
?lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "1"
main="Lattice 2016")
lattice
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, lines = TRUE,
main="Lattice 2016")
lattice
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, lines = TRUE,
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "p",
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "p",
main="Lattice 2016")
lattice
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "a",
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "b",
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "c",
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "d",
main="Lattice 2016")
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = "p",
main="Lattice 2016")
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
lattice
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = c("p", "r"),
<<<<<<< HEAD
main="August 2016")
lattice
ggsave('latticeAug2016.png', width=5, height=4)
#bring data in
data<-read.csv(file="deployment2_2016_smooth_csv.csv", header=TRUE)
#drop turf and post 72 hour obs
data <- data[ which(data$hours_since_deployment < 73 & data$treatment != 'turf'), ]
#make block into a factor
data$block <- as.factor(data$block)
##not using this code bit for 2016, because i did it in excel when smoothing: data$total<-rowSums(data[7:13])
####data$surviving<-data$total_all_stages/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
#ok, let's do this as a linear mixed effects model. We have to also call some other packages if we want p values
library(lmerTest)
#do the anova using lmer function
result <- lmer(surviving~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
#and an anova
anova(result)
#analysis of random and fixed parts and post hoc
#analysis of time and Treatment effects
step(result)
###going to try the same with the gls function, because my random effect variable is correlated within subject
library(nlme)
result_gls <- gls(surviving~ hours_since_deployment * treatment, data=data2, correlation = corCAR1(form = ~ 1|block/treatment))
summary(result_gls)
anova(result_gls)
#####need to do a t-test comparing number surviving in closed vs sham and closed vs open
###make object data70 with only surviving at 70 hours
data70<-data2[ which(data2$hours_since_deployment == "70"), ]
###do t-test comparing closed and sham
t.test(data70$close,data70$sham, paired=TRUE, "greater")
###t-test comparing open vs sham
t.test(data70$surviving,data70$sham, paired=TRUE, "greater")
##wilcox test of same
wilcox.test(data70$close, data70$sham, paired=TRUE)
wilcox.test(data70$surviving, data70$sham, paired=TRUE)
##
###below is lots of plotting code
#load library(ddply) compute summary stats for plotting
library(plyr)
library(ggthemes)
data2.summary<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(surviving),
mean=mean(surviving),
sd   = sd(surviving),
se   = sd / sqrt(N) )
data2.summary.closed<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(closed),
mean=mean(closed),
sd   = sd(closed),
se   = sd / sqrt(N) )
data2.summary.sham<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(sham),
mean=mean(sham),
sd   = sd(sham),
se   = sd / sqrt(N) )
#creating the plot!
#make my colour palette
cols <- c("corn" = "gold2", "prairie" = "lightreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
#load ggplot2
library(ggplot2)
library(ggthemes)
##error bar plots
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.eb.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.open_aug_2016.png', width=4, height=2)
ggplot.eb.open
ggplot.eb.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.closed_aug_2016.png', width=4, height=2)
ggplot.eb.closed
ggplot.eb.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme(text = element_text(size=14))+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.sham_aug_2016.png', width=4, height=2)
ggplot.eb.sham
#ribbon plots
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.open
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
##more plotting, making chart for comparing among exlcosure treatments
melt<-melt(data2, measure.vars = c("surviving", "closed", "sham"))
summary.melt<-ddply(melt, .(hours_since_deployment, variable), summarize,
N=length(value),
mean=mean(value),
sd   = sd(value),
se   = sd / sqrt(N) )
ggplot(summary.melt, aes(x=hours_since_deployment, y=mean, fill=variable))+
ggtitle("August 2016")+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
geom_line(size=1)+
xlab("\nHours Since Deployment")+
ylab("Surviving\n")+
theme_few()+
guides(alpha=FALSE)+
theme(text = element_text(size=14))+
ylim(0,1)+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=5, height=4)
##trying a lattice plot
library(lattice)
lattice<-xyplot(surviving ~ hours_since_deployment | block:treatment, data = data2, type = c("p", "r"),
main="August 2016")
lattice
stop(result_gls)
step(result_gls)
##error bar plots
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.eb.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.open_aug_2016.png', width=4, height=2)
ggplot.eb.open
ggplot.eb.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme_bw()+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.closed_aug_2016.png', width=4, height=2)
ggplot.eb.closed
ggplot.eb.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1)+
theme(text = element_text(size=14))+
theme_bw()+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))+
xlab("")+
ylab("")+
theme_few()
ggsave('ggplot.eb.sham_aug_2016.png', width=4, height=2)
ggplot.eb.sham
#ribbon plots
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
ggplot.open<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.open
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
##more plotting, making chart for comparing among exlcosure treatments
melt<-melt(data2, measure.vars = c("surviving", "closed", "sham"))
summary.melt<-ddply(melt, .(hours_since_deployment, variable), summarize,
N=length(value),
mean=mean(value),
sd   = sd(value),
se   = sd / sqrt(N) )
ggplot(summary.melt, aes(x=hours_since_deployment, y=mean, fill=variable))+
ggtitle("August 2016")+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
geom_line(size=1)+
xlab("\nHours Since Deployment")+
ylab("Surviving\n")+
theme_few()+
guides(alpha=FALSE)+
theme(text = element_text(size=14))+
ylim(0,1)+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggsave('ggplotsurvivalbyexclosureAug2016.png', width=5, height=4)
View(data2.summary.closed)
=======
main="Lattice 2016")
lattice
#read in shade data
shade_data<-read.csv(file="shade_exp.csv", header=TRUE)
#drop the treatment  80 m inside field, because found no eggs
shade_data<-shade_data[ which(shade_data$treatment != 'full shade, 80 m inside field'), ]
#omit NAs
shade_data<-na.omit(shade_data)
#make the appropriate variables into factors
shade_data$block <- as.factor(shade_data$date)
shade_data$time <- as.factor(shade_data$time)
shade_data$site <- as.factor(shade_data$site)
shade_data$obs <- as.factor(shade_data$obs)
shade_data$treatment <- as.factor(shade_data$treatment)
shade_data$plant <- as.factor(shade_data$plant)
#load plyr
library(plyr)
#sum monarch eggs within each plot, and create a column for how many plants were there
shade_data.avg <-ddply(shade_data, .(date, treatment, site, canopy.cover), summarize,
monarch_eggs.sum=sum(live_eggs),
nplants=length(live_eggs))
#load(pscl)
library(pscl)
library(MASS)
#do a negative binomial glm
result.nb<-glm.nb(monarch_eggs.sum ~ site + treatment + canopy.cover, offset(nplants), data=shade_data.avg)
#get the summary
summary(result.nb)
#do an anova
anova(result.nb, test="Rao")["treatment"]
summary(anova(result.nb, test="Rao"))
#do holm-adjusted pairwise t-tests
t.tests<-with(shade_data.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
<<<<<<< HEAD
#want to do a power test
#first have to caluclate effect size, ie cohen's d
library(effsize)
## this function requires making dataframes with only two treatment levels, below is every combo. trt 5 is missing because it was removed above
data_trt_1.2=shade_data.avg[shade_data.avg$treatment == 'full sun'|shade_data.avg$treatment =='2/3 plants removed',]
data_trt_1.3=shade_data.avg[shade_data.avg$treatment == 'full sun'|shade_data.avg$treatment =='1/3 plants removed',]
data_trt_1.4=shade_data.avg[shade_data.avg$treatment == 'full sun'|shade_data.avg$treatment =='full shade',]
data_trt_1.6=shade_data.avg[shade_data.avg$treatment == 'full sun'|shade_data.avg$treatment =='grass margin',]
data_trt_2.3=shade_data.avg[shade_data.avg$treatment == '2/3 plants removed'|shade_data.avg$treatment =='1/3 plants removed',]
data_trt_2.4=shade_data.avg[shade_data.avg$treatment == '2/3 plants removed'|shade_data.avg$treatment =='full shade',]
data_trt_2.6=shade_data.avg[shade_data.avg$treatment == '2/3 plants removed'|shade_data.avg$treatment =='grass margin',]
data_trt_3.4=shade_data.avg[shade_data.avg$treatment == '1/3 plants removed'|shade_data.avg$treatment =='full shade',]
data_trt_3.6=shade_data.avg[shade_data.avg$treatment == '1/3 plants removed'|shade_data.avg$treatment =='grass margin',]
data_trt_4.6=shade_data.avg[shade_data.avg$treatment == 'full shade'|shade_data.avg$treatment =='grass margin',]
##get rid of the unused levels
data_trt_1.2$treatment=factor(data_trt_1.2$treatment)
data_trt_1.3$treatment=factor(data_trt_1.3$treatment)
data_trt_1.4$treatment=factor(data_trt_1.4$treatment)
data_trt_1.6$treatment=factor(data_trt_1.6$treatment)
data_trt_2.3$treatment=factor(data_trt_2.3$treatment)
data_trt_2.4$treatment=factor(data_trt_2.4$treatment)
data_trt_2.6$treatment=factor(data_trt_2.6$treatment)
data_trt_3.4$treatment=factor(data_trt_3.4$treatment)
data_trt_3.6$treatment=factor(data_trt_3.6$treatment)
data_trt_4.6$treatment=factor(data_trt_4.6$treatment)
#calculate cohen's d
cohen.d(data_trt_1.2$monarch_eggs.sum, data_trt_1.2$treatment)
cohen.d(data_trt_1.3$monarch_eggs.sum, data_trt_1.3$treatment)
cohen.d(data_trt_1.4$monarch_eggs.sum, data_trt_1.4$treatment)
cohen.d(data_trt_1.6$monarch_eggs.sum, data_trt_1.6$treatment)
cohen.d(data_trt_2.3$monarch_eggs.sum, data_trt_2.3$treatment)
cohen.d(data_trt_2.4$monarch_eggs.sum, data_trt_2.4$treatment)
cohen.d(data_trt_2.6$monarch_eggs.sum, data_trt_2.6$treatment)
cohen.d(data_trt_3.4$monarch_eggs.sum, data_trt_3.4$treatment)
cohen.d(data_trt_3.6$monarch_eggs.sum, data_trt_3.6$treatment)
cohen.d(data_trt_4.6$monarch_eggs.sum, data_trt_4.6$treatment)
#now doing power test using above cohen's d and alpha = 0.05 and beta = 0.8
library(pwr)
pwr.t.test(d = -0.2220087, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d = -0.9933889, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d = -0.2906633, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d =  0.7035623, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d = -0.5486318, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d =  0.0701350, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d =  0.3370833, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d = -0.4295437, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d = -0.3478487, sig.level = 0.05, power =0.8 , type = c("paired"))
pwr.t.test(d =  0.2341778, sig.level = 0.05, power =0.8 , type = c("paired"))
# indicates I would need very large sample sizes
anova(result.nb, test="Rao")
#read in shade data
shade_data<-read.csv(file="shade_exp.csv", header=TRUE)
#drop the treatment  80 m inside field, because found no eggs
shade_data<-shade_data[ which(shade_data$treatment != 'full shade, 80 m inside field'), ]
#omit NAs
shade_data<-na.omit(shade_data)
#make the appropriate variables into factors
shade_data$block <- as.factor(shade_data$date)
shade_data$time <- as.factor(shade_data$time)
shade_data$site <- as.factor(shade_data$site)
shade_data$obs <- as.factor(shade_data$obs)
shade_data$treatment <- as.factor(shade_data$treatment)
shade_data$plant <- as.factor(shade_data$plant)
#load plyr
library(plyr)
#sum monarch eggs within each plot, and create a column for how many plants were there
shade_data.avg <-ddply(shade_data, .(date, treatment, site, canopy.cover), summarize,
monarch_eggs.sum=sum(live_eggs),
nplants=length(live_eggs))
#load(pscl)
library(pscl)
library(MASS)
#do a negative binomial glm
result.nb<-glm.nb(monarch_eggs.sum ~ site + treatment + canopy.cover, offset(nplants), data=shade_data.avg)
#get the summary
summary(result.nb)
#do an anova
anova(result.nb, test="Rao")
summary(anova(result.nb, test="Rao"))
#do holm-adjusted pairwise t-tests
t.tests<-with(shade_data.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
View(shade_data.avg)
>>>>>>> b2c1ce2b7c949ffb3a504df0cfc81ceaa58e3264
