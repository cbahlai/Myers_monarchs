ggtitle("Monarch Survival by Treatment") +
ggplot(hours.26, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("Monarch Survival by Treatment")
View(hours.26)
data2.summary.26.open<-subset(data2.summary, hours_since_deployment==26)
ggplot(data2.summary.26.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("Monarch Survival by Treatment") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
with(hours.26, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.22, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.26, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.49, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.71, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.0, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.6, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.8, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.11, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.13, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.19, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
data2.summary.6.open<-subset(data2.summary, hours_since_deployment==6)
data2.summary.13.open<-subset(data2.summary, hours_since_deployment==13)
data2.summary.26.open<-subset(data2.summary, hours_since_deployment==26)
data2.summary.49.open<-subset(data2.summary, hours_since_deployment==49)
#make the plots
ggplot(data2.summary.6.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("6 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.26.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("13 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.26.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("26 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.26.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("49 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
#make the plots
ggplot(data2.summary.6.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("6 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.13.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("13 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.26.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("26 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
ggplot(data2.summary.49.open, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("49 Hours") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())
with(hours.26, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.22, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.22, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.49, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.13, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.26, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.49, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
oviposition<-read.csv(file="oviposition.csv", header=TRUE) #read in oviposition file
oviposition<-na.omit(oviposition) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition.avg <-ddply(oviposition, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#make block, date, time, deployment into factors
oviposition.avg$block <- as.factor(oviposition.avg$block)
oviposition.avg$date <- as.factor(oviposition.avg$date)
oviposition.avg$time <- as.factor(oviposition.avg$time)
oviposition.avg$deployment <- as.factor(oviposition.avg$deployment)
#do the anova using glm function
result <- glm(monarch_eggs.sum ~ block + treatment, offset=nplants, data=oviposition.avg)
summary(result)
aov(result)
summary(aov(result))
TukeyHSD(aov(result))
#rerun anova with appropriate data as factors, with sum of eggs as response variable
result_covariates <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=nplants, data=oviposition.avg)
summary(result_covariates)
anova(result_covariates) #use anova rather than AOV because it handles GLM better
summary(anova(result_covariates))
TukeyHSD(aov(result_covariates)) #Tukey only works with aov function
#rerun this with poisson distribution
result_covariates.poisson <- glm(monarch_eggs.sum ~ block + treatment+deployment, offset=nplants, data=oviposition.avg, family = "poisson")
summary(result_covariates.poisson)
anova(result_covariates.poisson, test="Rao")
summary(anova(result_covariates.poisson, test="Rao"))
#skip pairwise comparisons- do this only for NB model
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment +deployment+offset(nplants), data=oviposition.avg)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition.summary<-ddply(oviposition.avg, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition.summary.overall<-ddply(oviposition.avg, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette.
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple", "dodgerblue2" )
ggplot(oviposition.summary.overall, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition by Habitat with SE Bars") +
theme(panel.background = element_blank(),)
oviposition.deployment3.avg<- subset(oviposition.avg, deployment==3)
#Doug asked me to redo the ANOVA with only the third egg check
# this is where the most important separations will be observed- sample sizes were very low in first two
oviposition.deployment3.avg<- subset(oviposition.avg, deployment==3)
#since we used a NB model for the whole dataset, let's just dive right in with an NB on the subset
library(pscl)
result_covariates.deployment3.nb <- glm.nb(monarch_eggs.sum ~ block + treatment +offset(nplants), data=oviposition.deployment3.avg)
summary(result_covariates.deployment3.nb)
anova(result_covariates.deployment3.nb, test="Rao")
summary(anova(result_covariates.deployment3.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition.deployment3.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
oviposition.deployment3.summary<-ddply(oviposition.deployment3.avg, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
head(oviposition.deployment3.summary)
#make a bar plot with ggplot
# Error bars represent standard error of the mean
#cols is my personalized colour palette.
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple", "dodgerblue2" )
ggplot(oviposition.deployment3.summary, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition.deployment3 by Habitat with SE Bars") +
theme(panel.background = element_blank())
#faceted bar chart!
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant observation" )+
ggtitle("Monarch Butterfly oviposition by Habitat with SE Bars") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))
ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
#bring data in
data<-read.csv(file="deployment2_csv.csv", header=TRUE)
#make block into a factor
data$block <- as.factor(data$block)
data$total<-rowSums(data[7:13])
data$surviving<-data$total/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
#do the anova using glm function
result <- glm(cbind(total, Initial_count) ~ hours_since_deployment * treatment +
block + (1+block:treatment)+offset(closed), data=data2,
family=binomial(link='logit'))
result
summary(result)
#also, let's do anova as an AoD becuase of data structure
#here's some scratch code to work from, lifted from Safarzoda thesis
anova(result, test="Rao")#analysis of deviance
#need to create concatenated variable for interaction
data2$hours.treatment<-paste(data2$treatment, ".", data2$hours_since_deployment)
with(data2, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
#need to do pairwise t-test only comparing within a given hours_since_deployment. I couldn't figure out how
#to do it using a for loop, so I took the brute force approach for the time being
hours.0<-subset(data2, hours_since_deployment==0)
hours.6<-subset(data2, hours_since_deployment==6)
hours.8<-subset(data2, hours_since_deployment==8)
hours.11<-subset(data2, hours_since_deployment==11)
hours.13<-subset(data2, hours_since_deployment==13)
hours.19<-subset(data2, hours_since_deployment==19)
hours.22<-subset(data2, hours_since_deployment==22)
hours.26<-subset(data2, hours_since_deployment==26)
hours.49<-subset(data2, hours_since_deployment==49)
hours.71<-subset(data2, hours_since_deployment==71)
hours.97<-subset(data2, hours_since_deployment==97)
hours.145<-subset(data2, hours_since_deployment==145)
hours.312<-subset(data2, hours_since_deployment==312)
hours.480<-subset(data2, hours_since_deployment==480)
hours.600<-subset(data2, hours_since_deployment==600)
with(hours.0, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.6, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.8, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.11, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.13, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.19, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.22, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.26, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.49, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.71, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.97, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.145, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.312, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.480, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
with(hours.600, pairwise.t.test(surviving, hours.treatment, p.adjust.method="holm"))
#load library(ddply) compute summary stats for plotting
library(plyr)
data2.summary<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(surviving),
mean=mean(surviving),
sd   = sd(surviving),
se   = sd / sqrt(N) )
data2.summary.closed<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(closed),
mean=mean(closed),
sd   = sd(closed),
se   = sd / sqrt(N) )
data2.summary.sham<-ddply(data2, .(hours_since_deployment, treatment), summarize,
N=length(sham),
mean=mean(sham),
sd   = sd(sham),
se   = sd / sqrt(N) )
#creating the plot!
#make my colour palette
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "fallow" = "firebrick1", "turf" ="dodgerblue2" )
#load ggplot2
library(ggplot2)
#make the pot
ggplot1<- ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position="dodge")+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
#view the plot
ggplot1
#cooler ggplot
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "fallow" = "firebrick1", "turf" ="dodgerblue2" )
ggplot2<- ggplot(data2.summary,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot2
#make it for closed and sham
ggplot.closed<- ggplot(data2.summary.closed,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.closed
ggplot.sham<- ggplot(data2.summary.sham,
aes(x=hours_since_deployment, y=mean, shape=treatment, colour=treatment, fill=treatment))+
geom_point()+
geom_ribbon(aes(ymin=mean-se, ymax=mean+se, alpha=1/2))+
scale_colour_manual(values=cols)+
scale_fill_manual(values=cols)+
geom_line(size=1.5)+
xlab("Hours Since Deployment")+
ylab("Surviving")+
theme(text = element_text(size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot.sham
#crazy faceted bar plot
ggplot(data2.summary, aes(x=treatment, y=mean, colour=treatment, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity") +
scale_color_manual(values=cols)+
scale_fill_manual(values=cols)+
ylab("surviving")+
ggtitle("Monarch Survival by Treatment") +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~hours_since_deployment)
ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "fallow" = "firebrick1", "turf" ="dodgerblue2" )
cols <- c("corn" = "gold2", "prairie" = "limegreen", "soy" = "mediumpurple", "fallow" = "firebrick1", "turf" ="dodgerblue2" )
ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "fallow" = "firebrick1", "turf" ="dodgerblue2" )
ggplot(data2.summary,
aes(x=data2.summary$hours_since_deployment, y=mean, colour=treatment, shape=treatment)) +
scale_color_manual(values=cols)+
geom_point()+
geom_line(size=1.5)+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))+
scale_x_continuous(expand = c(0, 0), limits = c(0, 75), breaks=c(0, 10, 20, 30, 40, 50, 60, 70))
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple", "dodgerblue2" )
ggplot(oviposition.deployment3.summary, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition.deployment3 by Habitat with SE Bars") +
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple", "dodgerblue2" )
ggplot(oviposition.deployment3.summary, aes(x=treatment, y=mean, fill=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
scale_color_manual(values=cols)+
ylab("monarch eggs / plant obervation" )+
ggtitle("Monarch Butterfly oviposition.deployment3 by Habitat with SE Bars") +
theme(panel.background = element_blank())+
theme(panel.background = element_blank(), axis.text.x = element_text(face="bold",
size=14),
axis.text.y = element_text(face="bold", size=14))
install.packages("vegan")
library(vegan)
community_matrix=matrix(
sample(1:100,300,replace=T),nrow=10,
dimnames=list(paste("community",1:10,sep=""),paste("sp",1:30,sep="")))
View(community_matrix)
pred_data<-read.csv(file="predator_surveys_deployment1.csv", header=TRUE)
View(pred_data)
pred_data$block.treatment = paste(pred_data$block, pred_data$treatment, sep=".")
View(community_matrix)
?plyr
?ddply
library(vegan)
#read in predator data from the first survival experiment
pred_data1<-read.csv(file="predator_surveys_deployment1.csv", header=TRUE)
#create a column that combines block and treatment
pred_data1$block.treatment = paste(pred_data1$block, pred_data1$treatment, sep=".")
View(pred_data1)
?doby
??doby
library(vegan)
#read in predator data from the first survival experiment
pred_data1<-read.csv(file="predator_surveys_deployment1.csv", header=TRUE)
#create a column that combines block and treatment
pred_data1$block.treatment = paste(pred_data1$block, pred_data1$treatment, sep=".")
NMDS<-metaMDS(pred_data1, k=2)
summary(pred_data1)
library(vegan)
#read in predator data from the first survival experiment
pred_data1<-read.csv(file="predator_surveys_deployment1.csv", header=TRUE)
#create a column that combines block and treatment
pred_data1$block.treatment = paste(pred_data1$block, pred_data1$treatment, sep=".")
dim(pred_data1)
pred_data1_matrix<-as.matrix(pred_data1[,5:24])
View(pred_data1_matrix)
metaMDS(pred_data1_matrix, k=2, distance="bray")
is.matrix(pred_data1_matrix)
block.treatment
block.treatment<-pred_data1_matrix[,24]
dim(pred_data1_matrix)
block.treatment<-pred_data1_matrix[,20]
pred_data1_matrix<pred_data1_matrix[,1:19]
pred_data1_matrix<-pred_data1_matrix[,1:19]
pred_data1_matrix<-cbind(block.treatment,pred_data1_matrix)
#moving the block.treatment column to the front of the matrix in probably a very inefficient way
block.treatment<-pred_data1_matrix[,20]
pred_data1_matrix<-pred_data1_matrix[,1:19]
pred_data1_matrix<-cbind(block.treatment,pred_data1_matrix)
#try NMDS
metaMDS(pred_data1_matrix, k=2, distance="bray")
install.packages("lme4")
#bring data in
data<-read.csv(file="deployment2_csv.csv", header=TRUE)
#make block into a factor
data$block <- as.factor(data$block)
data$total<-rowSums(data[7:13])
data$surviving<-data$total/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
#bring data in
data<-read.csv(file="deployment2_csv.csv", header=TRUE)
#make block into a factor
data$block <- as.factor(data$block)
data$total<-rowSums(data[7:13])
data$surviving<-data$total/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
View(data2)
View(data1)
View(data)
View(data2)
result <- glm(cbind(total, Initial_count) ~ hours_since_deployment * treatment +
block + (1+block:treatment)+offset(closed), data=data2,
family=binomial(link='logit'))
result
#bring data in
data<-read.csv(file="deployment2_csv.csv", header=TRUE)
data$block <- as.factor(data$block)
data$total<-rowSums(data[7:13])
data$surviving<-data$total/data$Initial_count
library(reshape2)
data1<-dcast(data, date+hours_since_deployment+block+treatment~exclosure_treatment, mean)
data1$open<-NULL
open.only<-data[which(data$exclosure_treatment=="open"),]
open.only$exclosure_treatment<-NULL
data2<-merge(open.only, data1)
library(lmerTest)
install.packages("lmerTest")
result <- lmer(total~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
library(lmerTest)
result <- lmer(total~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
anova(result)
View(data2)
result <- lmer(total~ hours_since_deployment * treatment + (1|block:treatment), data=data2)
result
summary(result)
