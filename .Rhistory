<<<<<<< HEAD
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#drop the turf treatment
oviposition2016.avg<-oviposition2016.avg[ which(oviposition2016.avg$treatment != 'turf'), ]
#average plants checked per day and sum all the eggs found per day
oviposition2016.avg.2 <-ddply(oviposition2016.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2016.avg.2 <-ddply(oviposition2016.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2016.avg.2$block <- as.factor(oviposition2016.avg.2$block)
oviposition2016.avg.2$date <- as.factor(oviposition2016.avg.2$date)
oviposition2016.avg.2$deployment <- as.factor(oviposition2016.avg.2$deployment)
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset=log(nplants.mean), data=oviposition2016.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2016.summary<-ddply(oviposition2016.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2016.summary.overall<-ddply(oviposition2016.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. it doesn't seem to work any more
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols)+
ylim(0,.1)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###################OK! trying the above for 2017
oviposition2017<-read.csv(file="oviposition2017.csv", header=TRUE) #read in oviposition2017 file
oviposition2017<-na.omit(oviposition2017) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2017.avg <-ddply(oviposition2017, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#average plants checked per day and sum all the eggs found per day
oviposition2017.avg.2 <-ddply(oviposition2017.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2017.avg.2 <-ddply(oviposition2017.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2017.avg.2$block <- as.factor(oviposition2017.avg.2$block)
oviposition2017.avg.2$date <- as.factor(oviposition2017.avg.2$date)
oviposition2017.avg.2$deployment <- as.factor(oviposition2017.avg.2$deployment)
#do negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset(log(nplants.mean)), data=oviposition2017.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2017.avg.2, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2017.summary<-ddply(oviposition2017.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2017.summary.overall<-ddply(oviposition2017.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. i can't get it to work any more, so i took out the argument
cols2017 <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple" )
ggplot(oviposition2017.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
ylim(0,.1)+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###### more ggplotting. can he make a faceted chart again? let's find out
#faceted bar chart!
cols <- c( "firebrick1", "gold2","yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2017.png', width = 7, height = 3)
#faceted bar charts with no colors
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2016")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 7, height = 3)
#####for days with more than one egg check, doug wants me to add up all the eggs and divide by the
######number of plants in the plot (or average if it changed). so redoing the former code from above to
### do this. also doing the same for 2017
####USE BELOW FOR PAPER
oviposition2016<-read.csv(file="oviposition2016.csv", header=TRUE) #read in oviposition2016 file
oviposition2016<-na.omit(oviposition2016) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2016.avg <-ddply(oviposition2016, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#drop the turf treatment
oviposition2016.avg<-oviposition2016.avg[ which(oviposition2016.avg$treatment != 'turf'), ]
#average plants checked per day and sum all the eggs found per day
oviposition2016.avg.2 <-ddply(oviposition2016.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2016.avg.2 <-ddply(oviposition2016.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2016.avg.2$block <- as.factor(oviposition2016.avg.2$block)
oviposition2016.avg.2$date <- as.factor(oviposition2016.avg.2$date)
oviposition2016.avg.2$deployment <- as.factor(oviposition2016.avg.2$deployment)
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset=log(nplants.mean), data=oviposition2016.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2016.summary<-ddply(oviposition2016.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2016.summary.overall<-ddply(oviposition2016.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
library(ggthemes)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. it doesn't seem to work any more
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols)+
ylim(0,.1)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###################OK! trying the above for 2017
oviposition2017<-read.csv(file="oviposition2017.csv", header=TRUE) #read in oviposition2017 file
oviposition2017<-na.omit(oviposition2017) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2017.avg <-ddply(oviposition2017, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#average plants checked per day and sum all the eggs found per day
oviposition2017.avg.2 <-ddply(oviposition2017.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2017.avg.2 <-ddply(oviposition2017.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2017.avg.2$block <- as.factor(oviposition2017.avg.2$block)
oviposition2017.avg.2$date <- as.factor(oviposition2017.avg.2$date)
oviposition2017.avg.2$deployment <- as.factor(oviposition2017.avg.2$deployment)
#do negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset(log(nplants.mean)), data=oviposition2017.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2017.avg.2, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2017.summary<-ddply(oviposition2017.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2017.summary.overall<-ddply(oviposition2017.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
m4.july2017.CI = data.frame(
x.july.2017 = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment.july.2017 = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
)
)
head(data_july2017_3day)
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))
fig1july2017
view(fig1july2017)
library(ggplot2)
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01))
fig1july2017
#############july 2017##################
#bring data in
data_july2017<-read.csv(file="deployment1_2017_notsmooth_csv.csv", header=TRUE)
#make a plant patch column called 'patch'
data_july2017<-within(data_july2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_july2017<-within(data_july2017, surviving <- (total_all_stages/initial_count))
#drop turf and all but 72 hr obs
data_july2017_3day <- data_july2017[ which(data_july2017$hours_since_deployment == 71 & data_july2017$treatment != 'turf'), ]
#####day3 survival###### eggs and caterpillars coming back to life not corrected#######
m0.july2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_july2017_3day)
m1.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m2.july2017 = glmer(cbind(total_all_stages, initial_count) ~
>>>>>>> 3cdbc98febf4b8a08d6fef33dd4c4ddf6ce41e95
exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m3.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m4.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
AICctab(m0.july2017, m1.july2017)
anova(m0.july2017, m1.july2017)
anova(m0.july2017, m2.july2017)
anova(m0.july2017, m1.july2017, m3.july2017, m4.july2017)
anova(m0.july2017, m2.july2017, m3.july2017, m4.july2017)
anova(m2.july2017, m4.july2017)
anova(m0.july2017, m4.july2017) #significance of interaction/fullmodel
summary(m4.july2017)
display(m4.july2017)
summary(m4.july2017)
o = sim(m4.july2017, n.sims=10000)
colMeans(fixef(o))
m4.july2017.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment.july.2017 = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
)
)
# effect sizes:
(m4.july2017.CI$coefs[2]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
(m4.july2017.CI$coefs[3]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
getOption("device")?
getOption("device")
install.packages("glmmADMB")
install.packages("bbmle")
install.packages("arm")
install.packages("lme4")
install.packages("piecewiseSEM")
install.packages("ggplot2")
# Load packages
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("arm")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
# Load packages
library(glmmADMB)
library(bbmle)
library(arm)
library(lme4)
library(piecewiseSEM)
library(ggplot2)
#############july 2017##################
#bring data in
data_july2017<-read.csv(file="deployment1_2017_notsmooth_csv.csv", header=TRUE)
#make a plant patch column called 'patch'
data_july2017<-within(data_july2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_july2017<-within(data_july2017, surviving <- (total_all_stages/initial_count))
#drop turf and all but 72 hr obs
data_july2017_3day <- data_july2017[ which(data_july2017$hours_since_deployment == 71 & data_july2017$treatment != 'turf'), ]
#####day3 survival###### eggs and caterpillars coming back to life not corrected#######
m0.july2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_july2017_3day)
m1.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m2.july2017 = glmer(cbind(total_all_stages, initial_count) ~
exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m3.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m4.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
# check out AICc values (from pkg bbmle)
AICctab(m0.july2017, m1.july2017)
# Do habitat treatments influence survival?
anova(m0.july2017, m1.july2017)
# Do exclosures treatments influence survival?
anova(m0.july2017, m2.july2017)
# Do habitat treatments and exclosure treatments both independently or interactively influence?
anova(m0.july2017, m1.july2017, m3.july2017, m4.july2017)
anova(m0.july2017, m2.july2017, m3.july2017, m4.july2017)
anova(m2.july2017, m4.july2017)
anova(m0.july2017, m4.july2017) #significance of interaction/fullmodel
summary(m4.july2017)
# Plotting
# FIGURE 1a
display(m4.july2017)
summary(m4.july2017)
o = sim(m4.july2017, n.sims=10000)
colMeans(fixef(o))
m4.july2017.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment.july.2017 = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
)
)
# effect sizes:
(m4.july2017.CI$coefs[2]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
(m4.july2017.CI$coefs[3]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
m4.july2017.CI
m4.july2017.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
)
)
# effect sizes:
(m4.july2017.CI$coefs[2]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
(m4.july2017.CI$coefs[3]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
<<<<<<< HEAD
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
head(o@fixef)
# Hi, Andrew! Here is some code showing how to run binomial GLMMs. This unfortunately
# won't actually run for you because there were a bunch of parts to this and the data are
# in a Google Sheets document. I didn't have time to clean and extract the data set and
# send it your way. But this will give you a view of what to do.
# Load packages
library(glmmADMB)
library(bbmle)
library(arm)
library(lme4)
library(piecewiseSEM)
# Load from Google Drive and prep data
source('~/Dropbox/CPB Field 2016/CPB pop dyn 2016 - data prep.r')
########## Day8 SURVIVAL #################################################################
# these are corrected so that beetles don't die and come back to life
m0 = glmer(cbind(cpbDay8Cor, cpbInitial.x - cpbDay8Cor) ~
1 + (1|plotf), family=binomial(), data=dw4)
m1 = glmer(cbind(cpbDay8Cor, cpbInitial.x - cpbDay8Cor) ~
plantTrtf + (1|plotf), family=binomial(), data=dw4)
m2 = glmer(cbind(cpbDay8Cor, cpbInitial.x - cpbDay8Cor) ~
podiTrtf + (1|plotf), family=binomial(), data=dw4)
m3 = glmer(cbind(cpbDay8Cor, cpbInitial.x - cpbDay8Cor) ~
podiTrtf + plantTrtf + (1|plotf), family=binomial(), data=dw4)
m4 = glmer(cbind(cpbDay8Cor, cpbInitial.x - cpbDay8Cor) ~
podiTrtf * plantTrtf + (1|plotf), family=binomial(), data=dw4)
# check out AICc values (from pkg bbmle)
AICctab(m0, m1,m2,m3,m4)
# Do plant treatments influence survival?
anova(m0, m1)
# Does podi treatment influence survival?
anova(m0, m2)
# Do plant treatments and podi treatments both independently or interactively influence?
anova(m0, m1, m3, m4)
anova(m0, m2, m3, m4)
anova(m2, m4)
anova(m0, m4) # Use this test for significance of interaction/fullmodel
summary(m4)
# R squared ... Unfortunately the sem.model.fits function only works on data in the LONG
# format, so I had to reformat the data so there is one row per individual (with 0 or 1)
# That's what dw4.day8.LONG is. Then I rerun the model with the LONG data and calc the R2
m4LONG = glmer(BINARYSURVIVAL ~ podiTrtf * plantTrtf + (1|plotf), family='binomial', data=dw4.day8.LONG)
sem.model.fits(m4LONG)
# Note if these seems like a pain, I can show you other (easier!) ways to calc R2
=======
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
#############july 2017##################
#bring data in
data_july2017<-read.csv(file="deployment1_2017_notsmooth_csv.csv", header=TRUE)
#make a plant patch column called 'patch'
data_july2017<-within(data_july2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_july2017<-within(data_july2017, surviving <- (total_all_stages/initial_count))
#drop turf and all but 72 hr obs
data_july2017_3day <- data_july2017[ which(data_july2017$hours_since_deployment == 71 & data_july2017$treatment != 'turf'), ]
#####day3 survival###### eggs and caterpillars coming back to life not corrected#######
m0.july2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_july2017_3day)
m1.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m2.july2017 = glmer(cbind(total_all_stages, initial_count) ~
exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m3.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m4.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
# check out AICc values (from pkg bbmle)
AICctab(m0.july2017, m1.july2017)
# Do habitat treatments influence survival?
anova(m0.july2017, m1.july2017)
# Do exclosures treatments influence survival?
anova(m0.july2017, m2.july2017)
# Do habitat treatments and exclosure treatments both independently or interactively influence?
anova(m0.july2017, m1.july2017, m3.july2017, m4.july2017)
anova(m0.july2017, m2.july2017, m3.july2017, m4.july2017)
anova(m2.july2017, m4.july2017)
anova(m0.july2017, m4.july2017) #significance of interaction/fullmodel
summary(m4.july2017)
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
# Plotting
# FIGURE 1a
display(m4.july2017)
summary(m4.july2017)
o = sim(m4.july2017, n.sims=10000)
colMeans(fixef(o))
<<<<<<< HEAD
m4.CI = data.frame(
x = rep(c('K', 'Y', 'YK'),2),
podi = rep(c('n', 'y'), each=3),
=======
m4.july2017.CI = data.frame(
<<<<<<< HEAD
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
=======
x.july.2017 = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment.july.2017 = rep(c('closed', 'open', 'sham'), each=4),
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
>>>>>>> 3cdbc98febf4b8a08d6fef33dd4c4ddf6ce41e95
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
)
)
# effect sizes:
<<<<<<< HEAD
(m4.CI$coefs[2]-m4.CI$coefs[1]) / m4.CI$coefs[1]
(m4.CI$coefs[3]-m4.CI$coefs[1]) / m4.CI$coefs[1]
fig1a = ggplot(dw4, aes(x = plantTrtf, y = survivalDay8Cor)) + geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
facet_grid(.~podi, labeller = labeller(podi = c('n' = 'control',
'y' = 'predation risk'))) +
labs(x = 'Plant treatment', y = 'Survival') +
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1) +
scale_x_discrete(labels=c('K' = 'R', 'Y' = 'S', 'YK' = 'Mix'))
m4.CI
=======
(m4.july2017.CI$coefs[2]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
(m4.july2017.CI$coefs[3]-m4.july2017.CI$coefs[1]) / m4.july2017.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1july2017 = ggplot(data_july2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
<<<<<<< HEAD
#############AUG 2017##################
#bring data in
data_aug2017<-read.csv(file="deployment2_2017_notsmooth_csv.csv", header=TRUE)
#make a plant patch column called 'patch'
data_aug2017<-within(data_aug2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_aug2017<-within(data_aug2017, surviving <- (total_all_stages/initial_count))
#drop turf and all but 72 hr obs
data_aug2017_3day <- data_aug2017[ which(data_aug2017$hours_since_deployment == 71 & data_aug2017$treatment != 'turf'), ]
#####day3 survival###### eggs and caterpillars coming back to life not corrected#######
m0.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_aug2017_3day)
m1.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m2.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m3.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m4.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
# check out AICc values (from pkg bbmle)
AICctab(m0.aug2017, m1.aug2017)
# Do habitat treatments influence survival?
anova(m0.aug2017, m1.aug2017)
# Do exclosures treatments influence survival?
anova(m0.aug2017, m2.aug2017)
View(data_aug2017)
#############AUG 2017##################
#bring data in
data_aug2017<-read.csv(file="deployment2_2017_notsmooth_csv.csv", header=TRUE)
#make a plant patch column called 'patch'
data_aug2017<-within(data_aug2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_aug2017<-within(data_aug2017, surviving <- (total_all_stages/initial_count))
#drop turf and all but 72 hr obs
data_aug2017_3day <- data_aug2017[ which(data_aug2017$hours_since_deployment == 72 & data_aug2017$treatment != 'turf'), ]
#####day3 survival###### eggs and caterpillars coming back to life not corrected#######
m0.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_aug2017_3day)
m1.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m2.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m3.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
m4.aug2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_aug2017_3day)
# check out AICc values (from pkg bbmle)
AICctab(m0.aug2017, m1.aug2017)
# Do habitat treatments influence survival?
anova(m0.aug2017, m1.aug2017)
# Do exclosures treatments influence survival?
anova(m0.aug2017, m2.aug2017)
# Do habitat treatments and exclosure treatments both independently or interactively influence?
anova(m0.aug2017, m1.aug2017, m3.aug2017, m4.aug2017)
anova(m0.aug2017, m2.aug2017, m3.aug2017, m4.aug2017)
anova(m2.aug2017, m4.aug2017)
anova(m0.aug2017, m4.aug2017) #significance of interaction/fullmodel
summary(m4.aug2017)
# Plotting
# FIGURE 1a
display(m4.aug2017)
summary(m4.aug2017)
o = sim(m4.aug2017, n.sims=10000)
=======
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
# Load packages
library(glmmADMB)
library(bbmle)
library(arm)
library(lme4)
library(piecewiseSEM)
>>>>>>> 978acd92cb84123e68b3e4593b75137dac9bf1c5
library(ggplot2)
library(ggthemes)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. i can't get it to work any more, so i took out the argument
cols2017 <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple" )
ggplot(oviposition2017.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
ylim(0,.1)+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###### more ggplotting. can he make a faceted chart again? let's find out
#faceted bar chart!
cols <- c( "firebrick1", "gold2","yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
<<<<<<< HEAD
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2017.png', width = 7, height = 3)
#faceted bar charts with no colors
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2016")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 7, height = 3)
#####for days with more than one egg check, doug wants me to add up all the eggs and divide by the
######number of plants in the plot (or average if it changed). so redoing the former code from above to
### do this. also doing the same for 2017
####USE BELOW FOR PAPER
oviposition2016<-read.csv(file="oviposition2016.csv", header=TRUE) #read in oviposition2016 file
oviposition2016<-na.omit(oviposition2016) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2016.avg <-ddply(oviposition2016, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#drop the turf treatment
oviposition2016.avg<-oviposition2016.avg[ which(oviposition2016.avg$treatment != 'turf'), ]
#average plants checked per day and sum all the eggs found per day
oviposition2016.avg.2 <-ddply(oviposition2016.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2016.avg.2 <-ddply(oviposition2016.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2016.avg.2$block <- as.factor(oviposition2016.avg.2$block)
oviposition2016.avg.2$date <- as.factor(oviposition2016.avg.2$date)
oviposition2016.avg.2$deployment <- as.factor(oviposition2016.avg.2$deployment)
#Test fit with negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset=log(nplants.mean), data=oviposition2016.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2016.summary<-ddply(oviposition2016.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2016.summary.overall<-ddply(oviposition2016.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
library(ggthemes)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. it doesn't seem to work any more
cols <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple")
ggplot(oviposition2016.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
=======
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
m4.CI
summary(m4)
plogis(-0.43721)
# Do plant treatments influence survival?
anova(m0, m1)
# Do exclosures treatments influence survival?
anova(m0, m2)
anova(m0, m4) #significance of interaction/fullmodel
colMeans(fixef(o))
plogis(colMeans(fixef(o)))
0
o
plogis( mean( o@fixef[,1] + o@fixef[,8] ) )
colnames(o)
View(o)
head(o)
head(o@fixef)
head(o@fixef)
plogis( mean( o@fixef[,1] + o@fixef[,3] ) )
plogis( mean( o@fixef[,1] + o@fixef[,4] ) )
plogis( mean( o@fixef[,1] + o@fixef[,6] ) )
m4.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,8] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] + o@fixef[,6] ) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.025 ) )
),
upper = c(plogis(quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.975 ) )
)
)
# effect sizes:
(m4.CI$coefs[2]-m4.CI$coefs[1]) / m4.CI$coefs[1]
(m4.CI$coefs[3]-m4.CI$coefs[1]) / m4.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
fig1a = ggplot(data_aug2016_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
m4.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,2] ) ),
plogis( mean( o@fixef[,3] ) ),
plogis( mean( o@fixef[,4] ) ),
plogis( mean( o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,8] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] + o@fixef[,6] ) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.025 ) )
),
upper = c(plogis(quantile( o@fixef[,1], 0.975 ) ),
=======
data_july2017<-read.csv(file="deployment1_2017_notsmooth_csv.csv", header=TRUE)
data_july2017<-within(data_july2017, patch <- paste(block,treatment,exclosure_treatment, sep ='.'))
data_july2017<-within(data_july2017, surviving <- (total_all_stages/initial_count))
data_july2017_3day <- data_july2017[ which(data_july2017$hours_since_deployment == 71 & data_july2017$treatment != 'turf'), ]
m0.july2017 = glmer(cbind(total_all_stages, initial_count) ~
1 + (1|patch), family=binomial(), data=data_july2017_3day)
m1.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m2.july2017 = glmer(cbind(total_all_stages, initial_count) ~
exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m3.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment + exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
m4.july2017 = glmer(cbind(total_all_stages, initial_count) ~
treatment*exclosure_treatment + (1|patch), family=binomial(), data=data_july2017_3day)
AICctab(m0.july2017, m1.july2017)
anova(m0.july2017, m1.july2017)
anova(m0.july2017, m2.july2017)
anova(m0.july2017, m1.july2017, m3.july2017, m4.july2017)
anova(m0.july2017, m2.july2017, m3.july2017, m4.july2017)
anova(m2.july2017, m4.july2017)
anova(m0.july2017, m4.july2017) #significance of interaction/fullmodel
summary(m4.july2017)
display(m4.july2017)
summary(m4.july2017)
o = sim(m4.july2017, n.sims=10000)
>>>>>>> 3cdbc98febf4b8a08d6fef33dd4c4ddf6ce41e95
colMeans(fixef(o))
m4.aug2017.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9]) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025  )),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
<<<<<<< HEAD
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.975 ) )
=======
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,5] + o@fixef[,7], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,5] + o@fixef[,8], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,5] + o@fixef[,9], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2]+ o@fixef[,6] + o@fixef[,10], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3]+ o@fixef[,6] + o@fixef[,11], 0.975) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4]+ o@fixef[,6] + o@fixef[,12], 0.975) )
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
)
)
# effect sizes:
(m4.aug2017.CI$coefs[2]-m4.aug2017.CI$coefs[1]) / m4.aug2017.CI$coefs[1]
(m4.aug2017.CI$coefs[3]-m4.aug2017.CI$coefs[1]) / m4.aug2017.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1aug2017 = ggplot(data_aug2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
<<<<<<< HEAD
geom_pointrange(data=m4.aug2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1aug2017
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1aug2017 = ggplot(data_aug2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.aug2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = cols, size=0.5, alpha=1)
fig1aug2017
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1aug2017 = ggplot(data_aug2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.aug2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
colour = cols, size=0.5, alpha=1)
fig1aug2017
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1aug2017 = ggplot(data_aug2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.aug2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=1, alpha=1)
fig1aug2017
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1" )
fig1aug2017 = ggplot(data_aug2017_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=1, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.aug2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1aug2017
# check out AICc values (from pkg bbmle)
AICctab(m0.aug2017, m1.aug2017)
# Do habitat treatments influence survival?
anova(m0.aug2017, m1.aug2017)
# Do exclosures treatments influence survival?
anova(m0.aug2017, m2.aug2017)
# Do habitat treatments and exclosure treatments both independently or interactively influence?
anova(m0.aug2017, m1.aug2017, m3.aug2017, m4.aug2017)
anova(m0.aug2017, m2.aug2017, m3.aug2017, m4.aug2017)
anova(m2.aug2017, m4.aug2017)
anova(m0.aug2017, m4.aug2017) #significance of interaction/fullmodel
summary(m4.aug2017)
=======
<<<<<<< HEAD
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
m4.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,2] ) ),
plogis( mean( o@fixef[,3] ) ),
plogis( mean( o@fixef[,4] ) ),
plogis( mean( o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,7] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,8] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,9] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.025 ) )
),
upper = c(plogis(quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3] + o@fixef[,6], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4] + o@fixef[,6], 0.975 ) )
)
)
# effect sizes:
(m4.CI$coefs[2]-m4.CI$coefs[1]) / m4.CI$coefs[1]
(m4.CI$coefs[3]-m4.CI$coefs[1]) / m4.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
fig1a = ggplot(data_aug2016_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
scale_color_manual(values=cols)+
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
m4.CI = data.frame(
x = rep(c('bare', 'corn', 'prairie', 'soy'), 3),
exclosure_treatment = rep(c('closed', 'open', 'sham'), each=4),
coefs = c(plogis( mean( o@fixef[,1] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,2] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,3] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,4] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,5] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,7] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,8] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,9] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,6] ) ),
plogis( mean( o@fixef[,1] + o@fixef[,10]) ),
plogis( mean( o@fixef[,1] + o@fixef[,11]) ),
plogis( mean( o@fixef[,1] + o@fixef[,12]) )
),
lower = c(plogis( quantile( o@fixef[,1], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,7], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,8], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,9], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.025  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,10], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,11], 0.025 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,12], 0.025 ) )
),
upper = c(plogis( quantile( o@fixef[,1], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,2], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,3], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,4], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,5], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,7], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,8], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,9], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,6], 0.975  ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,10], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,11], 0.975 ) ),
plogis( quantile( o@fixef[,1] + o@fixef[,12], 0.975 ) )
)
)
# effect sizes:
(m4.CI$coefs[2]-m4.CI$coefs[1]) / m4.CI$coefs[1]
(m4.CI$coefs[3]-m4.CI$coefs[1]) / m4.CI$coefs[1]
##make the figure
cols <- c("corn" = "gold2", "prairie" = "yellowgreen", "soy" = "mediumpurple", "bare" = "firebrick1", "turf" ="dodgerblue2" )
fig1a = ggplot(data_aug2016_3day, aes(x = treatment, y = total_all_stages/initial_count, colour = treatment))+
geom_point(alpha=0.5, position = position_jitter(width=0.05, height=0.01)) +
>>>>>>> 978acd92cb84123e68b3e4593b75137dac9bf1c5
scale_color_manual(values=cols)+
ylim(0,.1)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###################OK! trying the above for 2017
oviposition2017<-read.csv(file="oviposition2017.csv", header=TRUE) #read in oviposition2017 file
oviposition2017<-na.omit(oviposition2017) #get rid of na's. There were several incidents when we were unable to count eggs (broken plants, plants were covered by exclosures, etc)
#install and use the ddply function to average across subsamples (individual plants within plant patches)
library(plyr)
oviposition2017.avg <-ddply(oviposition2017, .(treatment, date, time, block, deployment), summarize,
monarch_eggs.mean=mean(monarch_eggs),
monarch_eggs.sum=sum(monarch_eggs),
nplants=length(monarch_eggs))
#average plants checked per day and sum all the eggs found per day
oviposition2017.avg.2 <-ddply(oviposition2017.avg, .(treatment, date, block, deployment), summarize,
nplants.mean=mean(nplants),
monarch_eggs.sum=sum(monarch_eggs.sum))
#divide number of eggs seen in a day by average number of plants present that day
oviposition2017.avg.2 <-ddply(oviposition2017.avg.2, .(treatment, date, block, deployment, monarch_eggs.sum, nplants.mean), summarize,
monarch_eggs.mean=monarch_eggs.sum/nplants.mean)
#then, repeating as above, make block, date, deployment into factors (but not time this time)
oviposition2017.avg.2$block <- as.factor(oviposition2017.avg.2$block)
oviposition2017.avg.2$date <- as.factor(oviposition2017.avg.2$date)
oviposition2017.avg.2$deployment <- as.factor(oviposition2017.avg.2$deployment)
#do negative binomial model
library(pscl)
result_covariates.nb <- glm.nb(monarch_eggs.sum ~ block + treatment + deployment, offset(log(nplants.mean)), data=oviposition2017.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2017.avg.2, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
#need to use ddply to compute summary stats for plotting
#this one includes deployment number for faceting ggplot later
oviposition2017.summary<-ddply(oviposition2017.avg.2, .(treatment, deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#this one does not include deployment number
oviposition2017.summary.overall<-ddply(oviposition2017.avg.2, .(treatment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
#make a bar plot with ggplot
library(ggplot2)
library(ggthemes)
# Error bars represent standard error of the mean
#cols is my personalized colour palette. i can't get it to work any more, so i took out the argument
cols2017 <- c("gold2", "firebrick1", "yellowgreen", "mediumpurple" )
ggplot(oviposition2017.summary.overall, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
ylim(0,.1)+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.2, position=position_dodge(.9), colour="black") +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), text = element_text(size=20, colour = "black"), complete=FALSE)
###### more ggplotting. can he make a faceted chart again? let's find out
#faceted bar chart!
cols <- c( "firebrick1", "gold2","yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols)+
<<<<<<< HEAD
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=.3, fill=cols2017) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
xlab("")+
ylab("")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_2017.png', width = 7, height = 3)
#faceted bar charts with no colors
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2016.summary, aes(x=treatment, y=mean)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2016")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2016.png', width = 7, height = 3)
#for 2017
cols2017 <- c("firebrick1","gold2",  "yellowgreen", "mediumpurple" )
labels <- c("1" = "June", "2" = "July", "3" = "August") #make labeller
ggplot(oviposition2017.summary, aes(x=treatment, y=mean, colour=treatment)) +
geom_bar(position=position_dodge(), stat="identity", size=1, fill="white", colour = "black") +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.2, position=position_dodge(.9)) +
scale_color_manual(values=cols2017)+
theme(panel.background = element_blank(), axis.text.x = element_blank(),  axis.ticks = element_blank())+
facet_grid(~deployment, labeller=labeller(deployment = labels))+
ggtitle("Oviposition 2017")+
xlab("")+
ylab("Monarch eggs/stem/day\n")+
theme_few()+
scale_y_continuous(expand = c(0, 0), limits = c(0, .3))
ggsave('faceted_ovipostion_nocolor_2017.png', width = 7, height = 3)
View(oviposition2016.avg.2)
#negative binomial model fit
library(lme4)
result_covariates.nb <- glmer.nb(monarch_eggs.sum ~ block + treatment + deployment + (1|block/treatment), offset=log(nplants.mean), data=oviposition2016.avg.2)
summary(result_covariates.nb)
anova(result_covariates.nb, test="Rao")
summary(anova(result_covariates.nb, test="Rao"))
#need a holm-adjusted t-test here because Tukey doesn't work with NB models
with(oviposition2016.avg, pairwise.t.test(monarch_eggs.sum, treatment, p.adjust.method="holm"))
View(oviposition2016.avg.2)
View(oviposition2016.summary)
View(oviposition2016.summary.overall)
#this one doesn't include treatment
oviposition2016.summary.by.deployment<- ddply(oviposition2016.avg, .(deployment), summarize,
N=length(monarch_eggs.mean),
mean=mean(monarch_eggs.mean),
sd   = sd(monarch_eggs.mean),
se   = sd / sqrt(N) )
View(oviposition2016.summary.by.deployment)
=======
facet_grid(.~exclosure_treatment) +
labs(x = 'habitat treatment', y = 'survival') +
geom_pointrange(data=m4.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, position = position_nudge(x = -0.35), alpha=1)
fig1a
colnames(o@fixef)
m4.CI
=======
geom_pointrange(data=m4.july2017.CI, aes(x = x, y = coefs, ymin=lower, ymax=upper),
col = 1, size=0.5, alpha=1)
fig1july2017
getOption("device")?
getOption("device")
>>>>>>> 212d568355dcd9a31a446bfa84a5d54dd05e1b0d
>>>>>>> 3cdbc98febf4b8a08d6fef33dd4c4ddf6ce41e95
>>>>>>> 978acd92cb84123e68b3e4593b75137dac9bf1c5
